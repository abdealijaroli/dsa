First negative integer in every window of size k
EasyAccuracy: 54.27%Submissions: 42607Points: 2
Given an array A[] of size N and a positive integer K, find the first negative integer for each and every window(contiguous subarray) of size K.

 

Example 1:

Input : 
N = 5
A[] = {-8, 2, 3, -6, 10}
K = 2
Output : 
-8 0 -6 -6
Explanation :
First negative integer for each window of size k
{-8, 2} = -8
{2, 3} = 0 (does not contain a negative integer)
{3, -6} = -6
{-6, 10} = -6
 
Example 2:
Input : 
N = 8
A[] = {12, -1, -7, 8, -15, 30, 16, 28}
K = 3
Output :
-1 -1 -7 -15 -15 0 






Code:
//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

vector<long long> printFirstNegativeInteger(long long int A[],
                                             long long int N, long long int K) {
    
    vector<long long> res;
    queue<long long> q;
    
    int n = N;
/*  int i=0, j=K-1;
    
    while(i<n and j<n){
        int temp = i;
        
        bool onlyPositives = true;
        
        for(i; i<=j; i++){
            if(A[i] < 0){
                onlyPositives = false;
                break;
            }
            
            if(i==j and onlyPositives)
                res.push_back(0);
        }
        if(!onlyPositives)
            res.push_back(A[i]);
        
        i = temp;
        i++;
        j++;
*/
        
        
    int i=0, j=0;
     
    while(j<n){
        if(A[j] < 0){
            q.push(A[j]);
        }
            
        if(j-i+1 < K)
            j++;
            
        else if(j-i+1 == K){
            if(!q.empty()){
                res.push_back(q.front());
            }
            else{
                res.push_back(0);
            }
            if(A[i]<0)
                q.pop();
            
            i++;
            j++;
        }
           
    }
    
    return res;
                               
 }

